// <auto-generated />
using System;
using CDR.Register.Repository.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CDR.Register.Repository.Migrations
{
    [DbContext(typeof(RegisterDatabaseContext))]
    [Migration("20220817233556_V3")]
    partial class V3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CDR.Register.Repository.Entities.AccreditationLevel", b =>
                {
                    b.Property<int>("AccreditationLevelId")
                        .HasColumnType("int");

                    b.Property<string>("AccreditationLevelCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AccreditationLevelId");

                    b.ToTable("AccreditationLevel", (string)null);
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.AuthDetail", b =>
                {
                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RegisterUTypeId")
                        .HasColumnType("int");

                    b.Property<string>("JwksEndpoint")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("BrandId", "RegisterUTypeId");

                    b.HasIndex("RegisterUTypeId");

                    b.ToTable("AuthDetail", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.Brand", b =>
                {
                    b.Property<Guid>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("BrandStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoUri")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("ParticipationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("BrandId");

                    b.HasIndex("BrandStatusId");

                    b.HasIndex("ParticipationId");

                    b.ToTable("Brand", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.BrandStatus", b =>
                {
                    b.Property<int>("BrandStatusId")
                        .HasColumnType("int");

                    b.Property<string>("BrandStatusCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("BrandStatusId");

                    b.ToTable("BrandStatus", (string)null);

                    b.HasData(
                        new
                        {
                            BrandStatusId = 1,
                            BrandStatusCode = "ACTIVE"
                        },
                        new
                        {
                            BrandStatusId = 2,
                            BrandStatusCode = "INACTIVE"
                        },
                        new
                        {
                            BrandStatusId = 3,
                            BrandStatusCode = "REMOVED"
                        });
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.Endpoint", b =>
                {
                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExtensionBaseUri")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("InfosecBaseUri")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("PublicBaseUri")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ResourceBaseUri")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("WebsiteUri")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("BrandId");

                    b.ToTable("Endpoint", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.IndustryType", b =>
                {
                    b.Property<int>("IndustryTypeId")
                        .HasColumnType("int");

                    b.Property<string>("IndustryTypeCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("IndustryTypeId");

                    b.ToTable("IndustryType", (string)null);

                    b.HasData(
                        new
                        {
                            IndustryTypeId = 1,
                            IndustryTypeCode = "banking"
                        },
                        new
                        {
                            IndustryTypeId = 2,
                            IndustryTypeCode = "energy"
                        });
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.LegalEntity", b =>
                {
                    b.Property<Guid>("LegalEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abn")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int?>("AccreditationLevelId")
                        .HasColumnType("int");

                    b.Property<string>("AccreditationNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Acn")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("AnzsicDivision")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Arbn")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("LegalEntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LegalEntityStatusId")
                        .HasColumnType("int");

                    b.Property<string>("LogoUri")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("OrganisationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("RegisteredCountry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LegalEntityId");

                    b.HasIndex("AccreditationLevelId");

                    b.HasIndex("LegalEntityStatusId");

                    b.HasIndex("OrganisationTypeId");

                    b.ToTable("LegalEntity", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.LegalEntityStatus", b =>
                {
                    b.Property<int>("LegalEntityStatusId")
                        .HasColumnType("int");

                    b.Property<string>("LegalEntityStatusCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LegalEntityStatusId");

                    b.ToTable("LegalEntityStatus", (string)null);
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.OrganisationType", b =>
                {
                    b.Property<int>("OrganisationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("OrganisationTypeCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OrganisationTypeId");

                    b.ToTable("OrganisationType", (string)null);

                    b.HasData(
                        new
                        {
                            OrganisationTypeId = 1,
                            OrganisationTypeCode = "SOLE_TRADER"
                        },
                        new
                        {
                            OrganisationTypeId = 2,
                            OrganisationTypeCode = "COMPANY"
                        },
                        new
                        {
                            OrganisationTypeId = 3,
                            OrganisationTypeCode = "PARTNERSHIP"
                        },
                        new
                        {
                            OrganisationTypeId = 4,
                            OrganisationTypeCode = "TRUST"
                        },
                        new
                        {
                            OrganisationTypeId = 5,
                            OrganisationTypeCode = "GOVERNMENT_ENTITY"
                        },
                        new
                        {
                            OrganisationTypeId = 6,
                            OrganisationTypeCode = "OTHER"
                        });
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.Participation", b =>
                {
                    b.Property<Guid>("ParticipationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IndustryId")
                        .HasColumnType("int");

                    b.Property<Guid>("LegalEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ParticipationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("ParticipationId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("LegalEntityId");

                    b.HasIndex("ParticipationTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Participation", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.ParticipationStatus", b =>
                {
                    b.Property<int>("ParticipationStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ParticipationStatusCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("ParticipationStatusId");

                    b.ToTable("ParticipationStatus", (string)null);

                    b.HasData(
                        new
                        {
                            ParticipationStatusId = 1,
                            ParticipationStatusCode = "ACTIVE"
                        },
                        new
                        {
                            ParticipationStatusId = 2,
                            ParticipationStatusCode = "REMOVED"
                        },
                        new
                        {
                            ParticipationStatusId = 3,
                            ParticipationStatusCode = "SUSPENDED"
                        },
                        new
                        {
                            ParticipationStatusId = 4,
                            ParticipationStatusCode = "REVOKED"
                        },
                        new
                        {
                            ParticipationStatusId = 5,
                            ParticipationStatusCode = "SURRENDERED"
                        },
                        new
                        {
                            ParticipationStatusId = 6,
                            ParticipationStatusCode = "INACTIVE"
                        });
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.ParticipationType", b =>
                {
                    b.Property<int>("ParticipationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ParticipationTypeCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("ParticipationTypeId");

                    b.ToTable("ParticipationType", (string)null);

                    b.HasData(
                        new
                        {
                            ParticipationTypeId = 1,
                            ParticipationTypeCode = "DH"
                        },
                        new
                        {
                            ParticipationTypeId = 2,
                            ParticipationTypeCode = "DR"
                        });
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.RegisterUType", b =>
                {
                    b.Property<int>("RegisterUTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RegisterUTypeCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("RegisterUTypeId");

                    b.ToTable("RegisterUType", (string)null);

                    b.HasData(
                        new
                        {
                            RegisterUTypeId = 1,
                            RegisterUTypeCode = "SIGNED-JWT"
                        });
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.SoftwareProduct", b =>
                {
                    b.Property<Guid>("SoftwareProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientUri")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("JwksUri")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("LogoUri")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("PolicyUri")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RecipientBaseUri")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RedirectUris")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("RevocationUri")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SectorIdentifierUri")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SoftwareProductDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SoftwareProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TosUri")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("SoftwareProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("StatusId");

                    b.ToTable("SoftwareProduct", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.SoftwareProductCertificate", b =>
                {
                    b.Property<Guid>("SoftwareProductCertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid>("SoftwareProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Thumbprint")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("SoftwareProductCertificateId");

                    b.HasIndex("SoftwareProductId");

                    b.ToTable("SoftwareProductCertificate", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.SoftwareProductStatus", b =>
                {
                    b.Property<int>("SoftwareProductStatusId")
                        .HasColumnType("int");

                    b.Property<string>("SoftwareProductStatusCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("SoftwareProductStatusId");

                    b.ToTable("SoftwareProductStatus", (string)null);

                    b.HasData(
                        new
                        {
                            SoftwareProductStatusId = 1,
                            SoftwareProductStatusCode = "ACTIVE"
                        },
                        new
                        {
                            SoftwareProductStatusId = 2,
                            SoftwareProductStatusCode = "INACTIVE"
                        },
                        new
                        {
                            SoftwareProductStatusId = 3,
                            SoftwareProductStatusCode = "REMOVED"
                        });
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.AuthDetail", b =>
                {
                    b.HasOne("CDR.Register.Repository.Entities.Brand", "Brand")
                        .WithMany("AuthDetails")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDR.Register.Repository.Entities.RegisterUType", "RegisterUType")
                        .WithMany()
                        .HasForeignKey("RegisterUTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("RegisterUType");
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.Brand", b =>
                {
                    b.HasOne("CDR.Register.Repository.Entities.BrandStatus", "BrandStatus")
                        .WithMany()
                        .HasForeignKey("BrandStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDR.Register.Repository.Entities.Participation", "Participation")
                        .WithMany("Brands")
                        .HasForeignKey("ParticipationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BrandStatus");

                    b.Navigation("Participation");
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.Endpoint", b =>
                {
                    b.HasOne("CDR.Register.Repository.Entities.Brand", "Brand")
                        .WithOne("Endpoint")
                        .HasForeignKey("CDR.Register.Repository.Entities.Endpoint", "BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.LegalEntity", b =>
                {
                    b.HasOne("CDR.Register.Repository.Entities.AccreditationLevel", "AccreditationLevel")
                        .WithMany()
                        .HasForeignKey("AccreditationLevelId");

                    b.HasOne("CDR.Register.Repository.Entities.LegalEntityStatus", "LegalEntityStatus")
                        .WithMany()
                        .HasForeignKey("LegalEntityStatusId");

                    b.HasOne("CDR.Register.Repository.Entities.OrganisationType", "OrganisationType")
                        .WithMany()
                        .HasForeignKey("OrganisationTypeId");

                    b.Navigation("AccreditationLevel");

                    b.Navigation("LegalEntityStatus");

                    b.Navigation("OrganisationType");
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.Participation", b =>
                {
                    b.HasOne("CDR.Register.Repository.Entities.IndustryType", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId");

                    b.HasOne("CDR.Register.Repository.Entities.LegalEntity", "LegalEntity")
                        .WithMany("Participations")
                        .HasForeignKey("LegalEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDR.Register.Repository.Entities.ParticipationType", "ParticipationType")
                        .WithMany()
                        .HasForeignKey("ParticipationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDR.Register.Repository.Entities.ParticipationStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("LegalEntity");

                    b.Navigation("ParticipationType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.SoftwareProduct", b =>
                {
                    b.HasOne("CDR.Register.Repository.Entities.Brand", "Brand")
                        .WithMany("SoftwareProducts")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDR.Register.Repository.Entities.SoftwareProductStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.SoftwareProductCertificate", b =>
                {
                    b.HasOne("CDR.Register.Repository.Entities.SoftwareProduct", "SoftwareProduct")
                        .WithMany("Certificates")
                        .HasForeignKey("SoftwareProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoftwareProduct");
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.Brand", b =>
                {
                    b.Navigation("AuthDetails");

                    b.Navigation("Endpoint");

                    b.Navigation("SoftwareProducts");
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.LegalEntity", b =>
                {
                    b.Navigation("Participations");
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.Participation", b =>
                {
                    b.Navigation("Brands");
                });

            modelBuilder.Entity("CDR.Register.Repository.Entities.SoftwareProduct", b =>
                {
                    b.Navigation("Certificates");
                });
#pragma warning restore 612, 618
        }
    }
}
